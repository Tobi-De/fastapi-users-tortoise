{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"FastAPI Users - Database adapter for Tortoise ORM \u00b6 Tortoise orm database adapter for fastapi-users v10 and above. If you want an example of a project using this or just bootstrap your project with fastapi-users and tortoise, you can check out the cookiecutter I'm working on here . Documentation : https://tobi-de.github.io/fastapi-users-tortoise Source Code : https://github.com/tobi-de/fastapi-users-tortoise Add quickly a registration and authentication system to your FastAPI project. FastAPI Users is designed to be as customizable and adaptable as possible. Sub-package for Tortoise ORM support in FastAPI Users. Installation \u00b6 1 pip install fastapi-users-tortoise Development \u00b6 Setup environment \u00b6 You should create a virtual environment and activate it: 1 python -m venv venv/ 1 source venv/bin/activate And then install the development dependencies: 1 pip install -r requirements.dev.txt Run unit tests \u00b6 You can run all the tests with: 1 make test Alternatively, you can run pytest yourself: 1 pytest There are quite a few unit tests, so you might run into ulimit issues where there are too many open file descriptors. You may be able to set a new, higher limit temporarily with: 1 ulimit -n 2048 Format the code \u00b6 Execute the following command to apply isort and black formatting: 1 make format License \u00b6 This project is licensed under the terms of the MIT license.","title":"Home"},{"location":"#fastapi-users---database-adapter-for-tortoise-orm","text":"Tortoise orm database adapter for fastapi-users v10 and above. If you want an example of a project using this or just bootstrap your project with fastapi-users and tortoise, you can check out the cookiecutter I'm working on here . Documentation : https://tobi-de.github.io/fastapi-users-tortoise Source Code : https://github.com/tobi-de/fastapi-users-tortoise Add quickly a registration and authentication system to your FastAPI project. FastAPI Users is designed to be as customizable and adaptable as possible. Sub-package for Tortoise ORM support in FastAPI Users.","title":"FastAPI Users - Database adapter for Tortoise ORM"},{"location":"#installation","text":"1 pip install fastapi-users-tortoise","title":"Installation"},{"location":"#development","text":"","title":"Development"},{"location":"#setup-environment","text":"You should create a virtual environment and activate it: 1 python -m venv venv/ 1 source venv/bin/activate And then install the development dependencies: 1 pip install -r requirements.dev.txt","title":"Setup environment"},{"location":"#run-unit-tests","text":"You can run all the tests with: 1 make test Alternatively, you can run pytest yourself: 1 pytest There are quite a few unit tests, so you might run into ulimit issues where there are too many open file descriptors. You may be able to set a new, higher limit temporarily with: 1 ulimit -n 2048","title":"Run unit tests"},{"location":"#format-the-code","text":"Execute the following command to apply isort and black formatting: 1 make format","title":"Format the code"},{"location":"#license","text":"This project is licensed under the terms of the MIT license.","title":"License"},{"location":"authentication/","text":"This page describes how to store access tokens generated by fastapi-users to the database using tortoise-orm. If you want ot get a better idea of what this is about I suggest you read this page from the official fastapi-users documentation. We'll expand from the basic Tortoise ORM configuration. 1 2 3 4 5 6 7 from fastapi_users_tortoise.access_token import TortoiseBaseAccessTokenModel , TortoiseAccessTokenDatabase class AccessToken ( TortoiseBaseAccessTokenModel ): pass async def get_access_token_db (): yield TortoiseAccessTokenDatabase [ AccessToken ]( AccessToken ) We define an AccessToken ORM model inheriting from TortoiseBaseAccessTokenModel . We define a dependency to instantiate the TortoiseAccessTokenDatabase class. Just like the user database adapter, it expects the AccessToken model class we defined above. That's it, the TortoiseBaseAccessTokenModel class defines a foreign key relationship to your user model like this: 1 2 3 4 5 6 7 class TortoiseBaseAccessTokenModel ( models . Model ): \"\"\"Tortoise access token model definition.\"\"\" ... user = fields . ForeignKeyField ( \"models.User\" ) class Meta : abstract = True You only need to change this if your user model is not called User or if it is not present in a tortoise orm app/namespace called models .","title":"Database Authentication backend"},{"location":"databases/","text":"This page describes how to configure your user model for fastapi-users using tortoise-orm. Read the official documentation Regarding this section to better understand how everything works, you can read the sqlalchemy guide for example. we will only cover here the specifics to use tortoise-orm. Asynchronous driver \u00b6 To work with your DBMS, you'll need to install the corresponding asyncio driver. The common choices are: For PostgreSQL: pip install asyncpg For SQLite: pip install aiosqlite For the sake of this tutorial from now on, we'll use a simple SQLite database. Create the User model \u00b6 As for any Tortoise ORM model, we'll create a User model. 1 2 3 4 5 6 7 from fastapi_users_tortoise import TortoiseBaseUserAccountModelUUID from tortoise import fields class User ( TortoiseBaseUserAccountModelUUID ): full_name = fields . CharField ( max_length = 255 , null = True ) short_name = fields . CharField ( max_length = 255 , null = True ) As you can see, fastapi-users-tortoise provides a base class that will include base fields for our User table. You can of course add you own fields there to fit to your needs! Primary key is defined as UUID By default, we use UUID as a primary key ID for your user. If you want to use another type, like an auto-incremented integer, you can use TortoiseBaseUserAccountModel as base class and define your own id column. 1 2 3 4 5 from fastapi_users_tortoise import TortoiseBaseUserAccountModel from tortoise import models , fields class User ( TortoiseBaseUserAccountModel , models . Model ): id = fields . IntField ( pk = True ) Implement a function to create the tables \u00b6 You can use the tortoise orm generate_schemas options to automatically create the table on app initialization, something like this: 1 2 3 4 5 6 7 8 9 10 11 12 from tortoise import Tortoise async def init (): # Here we create a SQLite DB using file \"db.sqlite3\" # also specify the app name of \"models\" # which contain models from \"app.models\" await Tortoise . init ( db_url = 'sqlite://db.sqlite3' , modules = { 'models' : [ 'app.models' ]} ) # Generate the schema await Tortoise . generate_schemas () Warning In production, it's strongly recommended to setup a migration system to update your SQL schemas. See Aerich . Create the database adapter dependency \u00b6 The database adapter of FastAPI Users makes the link between your database configuration and the users logic. It should be generated by a FastAPI dependency. 1 2 3 4 5 6 7 8 9 10 from fastapi_users_tortoise import TortoiseBaseUserAccountModelUUID , TortoiseUserDatabase from tortoise import fields class User ( TortoiseBaseUserAccountModelUUID ): full_name = fields . CharField ( max_length = 255 , null = True ) short_name = fields . CharField ( max_length = 255 , null = True ) async def get_user_db (): yield TortoiseUserDatabase ( User ) Notice that we pass it the User class, which is the actual Tortoise model.","title":"User model and databases"},{"location":"databases/#asynchronous-driver","text":"To work with your DBMS, you'll need to install the corresponding asyncio driver. The common choices are: For PostgreSQL: pip install asyncpg For SQLite: pip install aiosqlite For the sake of this tutorial from now on, we'll use a simple SQLite database.","title":"Asynchronous driver"},{"location":"databases/#create-the-user-model","text":"As for any Tortoise ORM model, we'll create a User model. 1 2 3 4 5 6 7 from fastapi_users_tortoise import TortoiseBaseUserAccountModelUUID from tortoise import fields class User ( TortoiseBaseUserAccountModelUUID ): full_name = fields . CharField ( max_length = 255 , null = True ) short_name = fields . CharField ( max_length = 255 , null = True ) As you can see, fastapi-users-tortoise provides a base class that will include base fields for our User table. You can of course add you own fields there to fit to your needs! Primary key is defined as UUID By default, we use UUID as a primary key ID for your user. If you want to use another type, like an auto-incremented integer, you can use TortoiseBaseUserAccountModel as base class and define your own id column. 1 2 3 4 5 from fastapi_users_tortoise import TortoiseBaseUserAccountModel from tortoise import models , fields class User ( TortoiseBaseUserAccountModel , models . Model ): id = fields . IntField ( pk = True )","title":"Create the User model"},{"location":"databases/#implement-a-function-to-create-the-tables","text":"You can use the tortoise orm generate_schemas options to automatically create the table on app initialization, something like this: 1 2 3 4 5 6 7 8 9 10 11 12 from tortoise import Tortoise async def init (): # Here we create a SQLite DB using file \"db.sqlite3\" # also specify the app name of \"models\" # which contain models from \"app.models\" await Tortoise . init ( db_url = 'sqlite://db.sqlite3' , modules = { 'models' : [ 'app.models' ]} ) # Generate the schema await Tortoise . generate_schemas () Warning In production, it's strongly recommended to setup a migration system to update your SQL schemas. See Aerich .","title":"Implement a function to create the tables"},{"location":"databases/#create-the-database-adapter-dependency","text":"The database adapter of FastAPI Users makes the link between your database configuration and the users logic. It should be generated by a FastAPI dependency. 1 2 3 4 5 6 7 8 9 10 from fastapi_users_tortoise import TortoiseBaseUserAccountModelUUID , TortoiseUserDatabase from tortoise import fields class User ( TortoiseBaseUserAccountModelUUID ): full_name = fields . CharField ( max_length = 255 , null = True ) short_name = fields . CharField ( max_length = 255 , null = True ) async def get_user_db (): yield TortoiseUserDatabase ( User ) Notice that we pass it the User class, which is the actual Tortoise model.","title":"Create the database adapter dependency"},{"location":"oauth2/","text":"FastAPI Users provides an optional OAuth2 authentication support. Read the official documentation on this for more details. Installation \u00b6 In case you are confused on how to install dependencies: 1 pip install 'fastapi-users[oauth]' Configuration \u00b6 Instantiate an OAuth2 client \u00b6 You first need to get an HTTPX OAuth client instance. Read the documentation for more information. 1 2 3 from httpx_oauth.clients.google import GoogleOAuth2 google_oauth_client = GoogleOAuth2 ( \"CLIENT_ID\" , \"CLIENT_SECRET\" ) Setup the database adapter \u00b6 You'll need to define the Tortoise ORM model for storing OAuth accounts. We provide a base one for this: 1 2 3 4 5 6 7 8 9 10 from fastapi_users_tortoise import TortoiseBaseUserOAuthAccountModelUUID , TortoiseBaseUserAccountModelUUID , TortoiseUserDatabase class User ( TortoiseBaseUserAccountModelUUID ): pass class OAuthAccount ( TortoiseBaseUserOAuthAccountModelUUID ): pass async def get_user_db (): yield TortoiseUserDatabase ( User , OAuthAccount ) The base class TortoiseBaseUserOAuthAccountModelUUID already defines a foreign key to your user model like this: You only need to change this if your user model is not called User or if it is not present in a tortoise orm app/namespace called models . 1 2 3 4 5 6 from tortoise import fields , models class TortoiseBaseUserOAuthAccountModel ( models . Model ): \"\"\"Base Tortoise ORM OAuth account model definition.\"\"\" ... user = fields . ForeignKeyField ( \"models.User\" , related_name = \"oauth_accounts\" ) You only need to change this if your user model is not called User or if it is not present in a tortoise orm app/namespace called models . However, you must keep the fields name as user and the related_name as oauth_accounts . Besides, when instantiating the database adapter, we need pass this Tortoise ORM model as second argument. Primary key is defined as UUID By default, we use UUID as a primary key ID for your user. If you want to use another type, like an auto-incremented integer, you can use TortoiseBaseUserOAuthAccountModel as base class and define your own id field. 1 2 class OAuthAccount ( TortoiseBaseUserOAuthAccountModel ): id = fields . IntField ( pk = True )","title":"Oauth2"},{"location":"oauth2/#installation","text":"In case you are confused on how to install dependencies: 1 pip install 'fastapi-users[oauth]'","title":"Installation"},{"location":"oauth2/#configuration","text":"","title":"Configuration"},{"location":"oauth2/#instantiate-an-oauth2-client","text":"You first need to get an HTTPX OAuth client instance. Read the documentation for more information. 1 2 3 from httpx_oauth.clients.google import GoogleOAuth2 google_oauth_client = GoogleOAuth2 ( \"CLIENT_ID\" , \"CLIENT_SECRET\" )","title":"Instantiate an OAuth2 client"},{"location":"oauth2/#setup-the-database-adapter","text":"You'll need to define the Tortoise ORM model for storing OAuth accounts. We provide a base one for this: 1 2 3 4 5 6 7 8 9 10 from fastapi_users_tortoise import TortoiseBaseUserOAuthAccountModelUUID , TortoiseBaseUserAccountModelUUID , TortoiseUserDatabase class User ( TortoiseBaseUserAccountModelUUID ): pass class OAuthAccount ( TortoiseBaseUserOAuthAccountModelUUID ): pass async def get_user_db (): yield TortoiseUserDatabase ( User , OAuthAccount ) The base class TortoiseBaseUserOAuthAccountModelUUID already defines a foreign key to your user model like this: You only need to change this if your user model is not called User or if it is not present in a tortoise orm app/namespace called models . 1 2 3 4 5 6 from tortoise import fields , models class TortoiseBaseUserOAuthAccountModel ( models . Model ): \"\"\"Base Tortoise ORM OAuth account model definition.\"\"\" ... user = fields . ForeignKeyField ( \"models.User\" , related_name = \"oauth_accounts\" ) You only need to change this if your user model is not called User or if it is not present in a tortoise orm app/namespace called models . However, you must keep the fields name as user and the related_name as oauth_accounts . Besides, when instantiating the database adapter, we need pass this Tortoise ORM model as second argument. Primary key is defined as UUID By default, we use UUID as a primary key ID for your user. If you want to use another type, like an auto-incremented integer, you can use TortoiseBaseUserOAuthAccountModel as base class and define your own id field. 1 2 class OAuthAccount ( TortoiseBaseUserOAuthAccountModel ): id = fields . IntField ( pk = True )","title":"Setup the database adapter"}]}